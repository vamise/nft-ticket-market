{"ast":null,"code":"import _classCallCheck from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport Provider from './Provider';\nimport eventFactoryABI from '../abi/contracts/EventFactory.json';\nvar provider = new Provider();\n\nvar eventFactory = function eventFactory() {\n  var _this = this;\n\n  _classCallCheck(this, eventFactory);\n\n  this.getInstance = function () {\n    return _this.instance;\n  };\n\n  var web3 = provider.web3;\n  var deploymentKey = Object.keys(eventFactoryABI.networks)[0];\n  this.instance = new web3.eth.Contract(eventFactoryABI.abi, eventFactoryABI.networks[deploymentKey].address);\n};\n\nvar EventFactory = new eventFactory();\nObject.freeze(eventFactory);\nexport default eventFactory.getInstance();","map":{"version":3,"sources":["/workspace/nft-ticket-market/client/src/proxies/EventFactory.js"],"names":["Provider","eventFactoryABI","provider","eventFactory","getInstance","instance","web3","deploymentKey","Object","keys","networks","eth","Contract","abi","address","EventFactory","freeze"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,IAAMC,QAAQ,GAAG,IAAIF,QAAJ,EAAjB;;IAEMG,Y,GACF,wBAAc;AAAA;;AAAA;;AAAA,OAUdC,WAVc,GAUA;AAAA,WAAM,KAAI,CAACC,QAAX;AAAA,GAVA;;AACV,MAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAtB;AACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYR,eAAe,CAACS,QAA5B,EAAsC,CAAtC,CAAtB;AAEA,OAAKL,QAAL,GAAgB,IAAIC,IAAI,CAACK,GAAL,CAASC,QAAb,CACZX,eAAe,CAACY,GADJ,EAEZZ,eAAe,CAACS,QAAhB,CAAyBH,aAAzB,EAAwCO,OAF5B,CAAhB;AAIH,C;;AAKL,IAAMC,YAAY,GAAG,IAAIZ,YAAJ,EAArB;AACAK,MAAM,CAACQ,MAAP,CAAcb,YAAd;AAEA,eAAeA,YAAY,CAACC,WAAb,EAAf","sourcesContent":["import Provider from './Provider';\nimport eventFactoryABI from '../abi/contracts/EventFactory.json';\n\nconst provider = new Provider();\n\nclass eventFactory {\n    constructor() {\n        const web3 = provider.web3;\n        const deploymentKey = Object.keys(eventFactoryABI.networks)[0];\n\n        this.instance = new web3.eth.Contract(\n            eventFactoryABI.abi,\n            eventFactoryABI.networks[deploymentKey].address,\n        );\n    }\n\n    getInstance = () => this.instance;\n}\n\nconst EventFactory = new eventFactory();\nObject.freeze(eventFactory);\n\nexport default eventFactory.getInstance();"]},"metadata":{},"sourceType":"module"}