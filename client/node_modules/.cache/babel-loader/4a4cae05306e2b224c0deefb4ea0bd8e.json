{"ast":null,"code":"import { chakra } from '@chakra-ui/system';\nimport { __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"type\", \"_hover\", \"_invalid\", \"_disabled\", \"_focus\", \"_checked\", \"_child\", \"_checkedAndChild\", \"_checkedAndDisabled\", \"_checkedAndFocus\", \"_checkedAndHover\", \"children\"];\n\nvar ControlBox = function ControlBox(props) {\n  var _extends2, _ref;\n\n  var _props$type = props.type,\n      type = _props$type === void 0 ? \"checkbox\" : _props$type,\n      _hover = props._hover,\n      _invalid = props._invalid,\n      _disabled = props._disabled,\n      _focus = props._focus,\n      _checked = props._checked,\n      _props$_child = props._child,\n      _child = _props$_child === void 0 ? {\n    opacity: 0\n  } : _props$_child,\n      _props$_checkedAndChi = props._checkedAndChild,\n      _checkedAndChild = _props$_checkedAndChi === void 0 ? {\n    opacity: 1\n  } : _props$_checkedAndChi,\n      _checkedAndDisabled = props._checkedAndDisabled,\n      _checkedAndFocus = props._checkedAndFocus,\n      _checkedAndHover = props._checkedAndHover,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var checkedAndDisabled = \"input[type=\" + type + \"]:checked:disabled + &\";\n  var checkedAndHover = \"input[type=\" + type + \"]:checked:hover:not(:disabled) + &\";\n  var checkedAndFocus = \"input[type=\" + type + \"]:checked:focus + &\";\n  var disabled = \"input[type=\" + type + \"]:disabled + &\";\n  var focus = \"input[type=\" + type + \"]:focus + &\";\n  var hover = \"input[type=\" + type + \"]:hover:not(:disabled):not(:checked) + &\";\n  var checked = \"input[type=\" + type + \"]:checked + &, input[type=\" + type + \"][aria-checked=mixed] + &\";\n  var invalid = \"input[type=\" + type + \"][aria-invalid=true] + &\";\n  var child = \"& > *\";\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, rest, {\n    \"aria-hidden\": true,\n    __css: (_ref = {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      transitionProperty: \"common\",\n      transitionDuration: \"fast\",\n      flexShrink: 0\n    }, _ref[focus] = _focus, _ref[hover] = _hover, _ref[disabled] = _disabled, _ref[invalid] = _invalid, _ref[checkedAndDisabled] = _checkedAndDisabled, _ref[checkedAndFocus] = _checkedAndFocus, _ref[checkedAndHover] = _checkedAndHover, _ref[child] = _child, _ref[checked] = _extends({}, _checked, (_extends2 = {}, _extends2[child] = _checkedAndChild, _extends2)), _ref)\n  }), children);\n};\n\nif (__DEV__) {\n  ControlBox.displayName = \"ControlBox\";\n}\n\nexport { ControlBox };","map":null,"metadata":{},"sourceType":"module"}