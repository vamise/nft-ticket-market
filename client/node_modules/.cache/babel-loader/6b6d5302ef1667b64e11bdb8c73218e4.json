{"ast":null,"code":"import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, chakra, useStyles, StylesProvider } from '@chakra-ui/system';\nimport { cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { getValidChildren } from '@chakra-ui/react-utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\n\n\nvar Input = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n  var ownProps = omitThemingProps(props);\n  var input = useFormControl(ownProps);\n\n  var _className = cx(\"chakra-input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    __css: styles.field,\n    ref: ref,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  Input.displayName = \"Input\";\n} // This is used in `input-group.tsx`\n\n\nInput.id = \"Input\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded$2 = [\"placement\"];\nvar placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\"\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\"\n  }\n};\nvar StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\n\nvar InputAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _placements$placement;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledAddon, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({}, styles.addon, placementStyles)\n  }));\n});\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\";\n}\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\n\n\nvar InputLeftAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"left\"\n  }, props, {\n    className: cx(\"chakra-input__left-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputLeftAddon.id = \"InputLeftAddon\";\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\n\nvar InputRightAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"right\"\n  }, props, {\n    className: cx(\"chakra-input__right-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputRightAddon.id = \"InputRightAddon\";\nvar _excluded$1 = [\"children\", \"className\"];\nvar InputGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _child$props, _child$props2;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}\n\nvar _excluded = [\"placement\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"className\"];\nvar StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _input$height, _input$height2, _elementStyles;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var styles = useStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  var elementStyles = (_elementStyles = {}, _elementStyles[attr] = \"0\", _elementStyles.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _elementStyles.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _elementStyles.fontSize = input == null ? void 0 : input.fontSize, _elementStyles);\n  return /*#__PURE__*/React.createElement(StyledElement, _extends({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputElement.id = \"InputElement\";\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\";\n}\n\nvar InputLeftElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var _className = cx(\"chakra-input__left-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputLeftElement.id = \"InputLeftElement\";\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\";\n}\n\nvar InputRightElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var _className = cx(\"chakra-input__right-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputRightElement.id = \"InputRightElement\";\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\";\n}\n\nexport { Input, InputAddon, InputGroup, InputLeftAddon, InputLeftElement, InputRightAddon, InputRightElement };","map":null,"metadata":{},"sourceType":"module"}