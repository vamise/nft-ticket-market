{"ast":null,"code":"import { getTabbableNodes } from './utils/DOMutils';\n\nvar getRelativeFocusable = function getRelativeFocusable(element, scope) {\n  if (!element || !scope || !scope.contains(element)) {\n    return {};\n  }\n\n  var focusables = getTabbableNodes([scope], new Map());\n  var current = focusables.findIndex(function (_a) {\n    var node = _a.node;\n    return node === element;\n  });\n\n  if (current === -1) {\n    return {};\n  }\n\n  return {\n    prev: focusables[current - 1],\n    next: focusables[current + 1],\n    first: focusables[0],\n    last: focusables[focusables.length - 1]\n  };\n};\n\nvar defaultOptions = function defaultOptions(options) {\n  return Object.assign({\n    scope: document.body,\n    cycle: true\n  }, options);\n};\n\nexport var focusNextElement = function focusNextElement(baseElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaultOptions(options),\n      scope = _a.scope,\n      cycle = _a.cycle;\n\n  var _b = getRelativeFocusable(baseElement, scope),\n      next = _b.next,\n      first = _b.first;\n\n  var newTarget = next || cycle && first;\n\n  if (newTarget) {\n    newTarget.node.focus(options.focusOptions);\n  }\n};\nexport var focusPrevElement = function focusPrevElement(baseElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaultOptions(options),\n      scope = _a.scope,\n      cycle = _a.cycle;\n\n  var _b = getRelativeFocusable(baseElement, scope),\n      prev = _b.prev,\n      last = _b.last;\n\n  var newTarget = prev || cycle && last;\n\n  if (newTarget) {\n    newTarget.node.focus(options.focusOptions);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}