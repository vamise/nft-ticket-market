{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { useState, useCallback, useLayoutEffect } from \"react\";\nexport function renderCar(WrappedComponent, defaults, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function State(_a) {\n    var stateRef = _a.stateRef,\n        props = _a.props;\n    var renderTarget = useCallback(function SideTarget() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      useLayoutEffect(function () {\n        stateRef.current(args);\n      });\n      return null;\n    }, []);\n    return React.createElement(WrappedComponent, tslib_1.__assign({}, props, {\n      children: renderTarget\n    }));\n  }\n\n  var Children = React.memo(function (_a) {\n    var stateRef = _a.stateRef,\n        defaultState = _a.defaultState,\n        children = _a.children;\n\n    var _b = useState(defaultState.current),\n        state = _b[0],\n        setState = _b[1];\n\n    React.useEffect(function () {\n      stateRef.current = setState;\n    }, []);\n    return children.apply(void 0, state);\n  }, function () {\n    return true;\n  });\n  return function Combiner(props) {\n    var defaultState = React.useRef(defaults(props));\n    var ref = React.useRef(function (state) {\n      return defaultState.current = state;\n    });\n    return React.createElement(React.Fragment, null, React.createElement(State, {\n      stateRef: ref,\n      props: props\n    }), React.createElement(Children, {\n      stateRef: ref,\n      defaultState: defaultState,\n      children: props.children\n    }));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}