{"ast":null,"code":"var _jsxFileName = \"/workspace/nft-ticket-market/client/src/components/Purchase.jsx\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport EventNFT from '../proxies/EventNFT';\nimport EventMarketplace from '../proxies/EventMarketplace';\nimport eventToken from '../proxies/EventToken';\nimport renderNotification from '../utils/notification-handler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3;\n\nclass Purchase extends Component {\n  constructor() {\n    super();\n\n    this.updateEvents = async () => {\n      try {\n        const initiator = await web3.eth.getCoinbase();\n        const activeEvents = await eventFactory.methods.getActiveEvents().call({\n          from: initiator\n        });\n        const fests = await Promise.all(activeEvents.map(async fest => {\n          const festDetails = await eventFactory.methods.getEventDetails(fest).call({\n            from: initiator\n          });\n          const [eventName, festSymbol, ticketPrice, totalSupply, marketplace] = Object.values(festDetails);\n          const nftInstance = await EventNFT(fest);\n          const saleId = await nftInstance.methods.getNextSaleTicketId().call({\n            from: initiator\n          });\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"center\",\n              children: eventName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"center\",\n              children: web3.utils.fromWei(ticketPrice, 'ether')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"center\",\n              children: totalSupply - saleId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"custom-btn login-btn\",\n                onClick: this.onPurchaseTicket.bind(this, marketplace, ticketPrice, initiator),\n                children: \"Buy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 13\n            }, this)]\n          }, fest, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this);\n        }));\n        this.setState({\n          events: fests\n        });\n      } catch (err) {\n        renderNotification('danger', 'Error', err.message);\n        console.log('Error while updating the fetivals', err);\n      }\n    };\n\n    this.onPurchaseTicket = async (marketplace, ticketPrice, initiator) => {\n      try {\n        const marketplaceInstance = await EventMarketplace(marketplace);\n        await eventToken.methods.approve(marketplace, ticketPrice).send({\n          from: initiator,\n          gas: 6700000\n        });\n        await marketplaceInstance.methods.purchaseTicket().send({\n          from: initiator,\n          gas: 6700000\n        });\n        await this.updateEvents();\n        renderNotification('success', 'Success', `Ticket for the Event purchased successfully!`);\n      } catch (err) {\n        console.log('Error while creating new event', err);\n        renderNotification('danger', 'Error', err.message);\n      }\n    };\n\n    this.inputChangedHandler = e => {\n      const state = this.state;\n      state[e.target.name] = e.target.value;\n      this.setState(state);\n    };\n\n    this.state = {\n      events: []\n    };\n    web3 = new Web3(window.ethereum);\n  }\n\n  async componentDidMount() {\n    await this.updateEvents();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container \",\n      class: \"col s12 m6 offset-m3 l4 offset-l4 z-depth-6 card-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        class: \"center\",\n        children: \"Purchase Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"requests\",\n        class: \"responsive-table striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"center\",\n              children: \"Name\"\n            }, 'name', false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"center\",\n              children: \"Price(in EVENT)\"\n            }, 'price', false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"center\",\n              children: \"Tickets Left\"\n            }, 'left', false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              class: \"center\",\n              children: \"Purchase\"\n            }, 'purchase', false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          class: \"striped highlight\",\n          children: this.state.events\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Purchase;","map":{"version":3,"sources":["/workspace/nft-ticket-market/client/src/components/Purchase.jsx"],"names":["React","Component","Web3","eventFactory","EventNFT","EventMarketplace","eventToken","renderNotification","web3","Purchase","constructor","updateEvents","initiator","eth","getCoinbase","activeEvents","methods","getActiveEvents","call","from","fests","Promise","all","map","fest","festDetails","getEventDetails","eventName","festSymbol","ticketPrice","totalSupply","marketplace","Object","values","nftInstance","saleId","getNextSaleTicketId","utils","fromWei","onPurchaseTicket","bind","setState","events","err","message","console","log","marketplaceInstance","approve","send","gas","purchaseTicket","inputChangedHandler","e","state","target","name","value","window","ethereum","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport EventNFT from '../proxies/EventNFT';\nimport EventMarketplace from '../proxies/EventMarketplace';\nimport eventToken from '../proxies/EventToken';\nimport renderNotification from '../utils/notification-handler';\n\nlet web3;\n\nclass Purchase extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      events: [],\n    };\n\n    web3 = new Web3(window.ethereum);\n  }\n\n  async componentDidMount() {\n    await this.updateEvents();\n  }\n\n  updateEvents = async () => {\n    try {\n      const initiator = await web3.eth.getCoinbase();\n      const activeEvents = await eventFactory.methods.getActiveEvents().call({ from: initiator });\n      const fests = await Promise.all(activeEvents.map(async fest => {\n        const festDetails = await eventFactory.methods.getEventDetails(fest).call({ from: initiator });\n        const [eventName, festSymbol, ticketPrice, totalSupply, marketplace] = Object.values(festDetails);\n        const nftInstance = await EventNFT(fest);\n        const saleId = await nftInstance.methods.getNextSaleTicketId().call({ from: initiator });\n\n        return (\n          <tr key={fest}>\n            <td class=\"center\">{eventName}</td>\n            <td class=\"center\">{web3.utils.fromWei(ticketPrice, 'ether')}</td>\n            <td class=\"center\">{totalSupply - saleId}</td>\n\n            <td class=\"center\"><button type=\"submit\" className=\"custom-btn login-btn\" onClick={this.onPurchaseTicket.bind(this, marketplace, ticketPrice, initiator)}>Buy</button></td>\n          </tr>\n        );\n      }));\n\n      this.setState({ events: fests });\n    } catch (err) {\n      renderNotification('danger', 'Error', err.message);\n      console.log('Error while updating the fetivals', err);\n    }\n  }\n\n  onPurchaseTicket = async (marketplace, ticketPrice, initiator) => {\n    try {\n      const marketplaceInstance = await EventMarketplace(marketplace);\n      await eventToken.methods.approve(marketplace, ticketPrice).send({ from: initiator, gas: 6700000 });\n      await marketplaceInstance.methods.purchaseTicket().send({ from: initiator, gas: 6700000 });\n      await this.updateEvents();\n\n      renderNotification('success', 'Success', `Ticket for the Event purchased successfully!`);\n    } catch (err) {\n      console.log('Error while creating new event', err);\n      renderNotification('danger', 'Error', err.message);\n    }\n  }\n\n  inputChangedHandler = (e) => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div class=\"container \" class=\"col s12 m6 offset-m3 l4 offset-l4 z-depth-6 card-panel\">\n        <h4 class=\"center\">Purchase Tickets</h4>\n        <table id='requests' class=\"responsive-table striped\" >\n          <thead>\n            <tr>\n              <th key='name' class=\"center\">Name</th>\n              <th key='price' class=\"center\">Price(in EVENT)</th>\n              <th key='left' class=\"center\">Tickets Left</th>\n              <th key='purchase' class=\"center\">Purchase</th>\n            </tr>\n          </thead>\n          <tbody class=\"striped highlight\">\n            {this.state.events}\n          </tbody>\n        </table>\n      </div >\n    )\n  }\n}\n\nexport default Purchase;  "]},"metadata":{},"sourceType":"module"}