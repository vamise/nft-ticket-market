{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspace/nft-ticket-market/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspace/nft-ticket-market/client/src/components/Event.jsx\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport eventToken from '../proxies/EventToken';\nimport EventNFT from '../proxies/EventNFT';\nimport renderNotification from '../utils/notification-handler';\nimport { Input, Button, Text } from '@chakra-ui/react';\nvar web3;\nvar DEFAULT_GAS = 64209;\n\nvar Events = /*#__PURE__*/function (_Component) {\n  _inherits(Events, _Component);\n\n  function Events() {\n    var _this;\n\n    _classCallCheck(this, Events);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Events).call(this));\n\n    _this.onCreateEvent = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var organizer, _this$state, name, symbol, price, supply, commission, scalp_protection, _yield$eventFactory$m, _yield$eventFactory$m2, ntfAddress, marketplaceAddress, nftInstance, batches, batchSupply, curCount, prevCount, res, i, _res;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                e.preventDefault();\n                _context.next = 4;\n                return web3.eth.getCoinbase();\n\n              case 4:\n                organizer = _context.sent;\n                _this$state = _this.state, name = _this$state.name, symbol = _this$state.symbol, price = _this$state.price, supply = _this$state.supply, commission = _this$state.commission, scalp_protection = _this$state.scalp_protection;\n                _context.next = 8;\n                return eventFactory.methods.createNewEvent(eventToken._address, name, symbol, web3.utils.toWei(price, 'ether'), supply, commission, scalp_protection).send({\n                  from: organizer,\n                  gas: DEFAULT_GAS\n                });\n\n              case 8:\n                _yield$eventFactory$m = _context.sent;\n                _yield$eventFactory$m2 = _yield$eventFactory$m.events.Created.returnValues;\n                ntfAddress = _yield$eventFactory$m2.ntfAddress;\n                marketplaceAddress = _yield$eventFactory$m2.marketplaceAddress;\n                renderNotification('success', 'Success', \"Event Created Successfully!\");\n                _context.next = 15;\n                return EventNFT(ntfAddress);\n\n              case 15:\n                nftInstance = _context.sent;\n                batches = Math.ceil(supply / 30);\n                batchSupply = 30;\n                curCount = 0;\n                prevCount = 0;\n\n                if (!(supply < 30)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.next = 23;\n                return nftInstance.methods.bulkMintTickets(supply, marketplaceAddress).send({\n                  from: organizer,\n                  gas: DEFAULT_GAS\n                });\n\n              case 23:\n                res = _context.sent;\n                _context.next = 37;\n                break;\n\n              case 26:\n                i = 0;\n\n              case 27:\n                if (!(i < batches)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                prevCount = curCount;\n                curCount += 30;\n\n                if (supply < curCount) {\n                  batchSupply = supply - prevCount;\n                }\n\n                _context.next = 33;\n                return nftInstance.methods.bulkMintTickets(batchSupply, marketplaceAddress).send({\n                  from: organizer,\n                  gas: DEFAULT_GAS\n                });\n\n              case 33:\n                _res = _context.sent;\n\n              case 34:\n                i++;\n                _context.next = 27;\n                break;\n\n              case 37:\n                _context.next = 43;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t0 = _context[\"catch\"](0);\n                console.log('Error while creating new event', _context.t0);\n                renderNotification('danger', 'Error', \"\".concat(_context.t0.message));\n\n              case 43:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 39]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.inputChangedHandler = function (e) {\n      var state = _this.state;\n      state[e.target.name] = e.target.value;\n\n      _this.setState(state);\n    };\n\n    _this.state = {\n      name: '',\n      symbol: '',\n      price: '',\n      supply: '',\n      commission: 20,\n      scalp_protection: 150\n    };\n    web3 = new Web3(window.ethereum);\n    return _this;\n  }\n\n  _createClass(Events, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"container center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"container\",\n        style: {\n          backgroundColor: '#F5F8FA',\n          backgroundOpacity: 0.5,\n          marginTop: 40,\n          boxShadow: '0px 10px 10px #888888',\n          width: '50%',\n          border: '1px solid black',\n          padding: 30,\n          paddingTop: 20,\n          borderRadius: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        fontSize: \"4xl\",\n        padding: 18,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, \"Create New Event\"), this.state.name && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 33\n        }\n      }, \"Event Name\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Event Name\",\n        value: this.state.name,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            name: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }\n      }), this.state.symbol && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 37\n        }\n      }, \"Event Ticker Symbol\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Event Ticker Symbol\",\n        value: this.state.symbol,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            symbol: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }\n      }), this.state.price && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 36\n        }\n      }, \"Ticket Price\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Ticket Price\",\n        value: this.state.price,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            price: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }), this.state.supply && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 37\n        }\n      }, \"Total Ticket Amount\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Total Ticket Amount\",\n        value: this.state.supply,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            supply: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }), this.state.commission && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 41\n        }\n      }, \"Commission (%)\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Commission (%)\",\n        value: this.state.commission,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            commission: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }), this.state.scalp_protection && /*#__PURE__*/React.createElement(Text, {\n        mb: \"8px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 47\n        }\n      }, \"Maximum Resale Price (%)\"), /*#__PURE__*/React.createElement(Input, {\n        style: styles.input,\n        placeholder: \"Maximum Resale Price (%)\",\n        value: this.state.scalp_protection,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            scalp_protection: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        colorScheme: \"teal\",\n        size: \"lg\",\n        marginTop: -2,\n        onClick: function onClick(e) {\n          return _this2.onCreateEvent(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, \"Create New Event\")));\n    }\n  }]);\n\n  return Events;\n}(Component);\n\nvar styles = {\n  input: {\n    textAlign: 'center',\n    marginBottom: 35\n  }\n};\nexport default Event;","map":{"version":3,"sources":["/workspace/nft-ticket-market/client/src/components/Event.jsx"],"names":["React","Component","Web3","eventFactory","eventToken","EventNFT","renderNotification","Input","Button","Text","web3","DEFAULT_GAS","Events","onCreateEvent","e","preventDefault","eth","getCoinbase","organizer","state","name","symbol","price","supply","commission","scalp_protection","methods","createNewEvent","_address","utils","toWei","send","from","gas","events","Created","returnValues","ntfAddress","marketplaceAddress","nftInstance","batches","Math","ceil","batchSupply","curCount","prevCount","bulkMintTickets","res","i","console","log","message","inputChangedHandler","target","value","setState","window","ethereum","backgroundColor","backgroundOpacity","marginTop","boxShadow","width","border","padding","paddingTop","borderRadius","styles","input","event","textAlign","marginBottom","Event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport eventToken from '../proxies/EventToken';\nimport EventNFT from '../proxies/EventNFT';\nimport renderNotification from '../utils/notification-handler';\nimport { Input, Button, Text } from '@chakra-ui/react'\n\nlet web3;\nconst DEFAULT_GAS = 64209;\n\nclass Events extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      symbol: '',\n      price: '',\n      supply: '',\n      commission: 20,\n      scalp_protection: 150,\n    };\n\n    web3 = new Web3(window.ethereum);\n  }\n\n  onCreateEvent = async (e) => {\n    try {\n      e.preventDefault();\n\n      const organizer = await web3.eth.getCoinbase();\n      const { name, symbol, price, supply, commission, scalp_protection } = this.state;\n      const { events: { Created: { returnValues: { ntfAddress, marketplaceAddress } } } } = await eventFactory.methods.createNewEvent(\n        eventToken._address,\n        name,\n        symbol,\n        web3.utils.toWei(price, 'ether'),\n        supply,\n        commission,\n        scalp_protection\n      ).send({ from: organizer, gas: DEFAULT_GAS });\n\n      renderNotification('success', 'Success', `Event Created Successfully!`);\n\n      const nftInstance = await EventNFT(ntfAddress);\n      const batches = Math.ceil(supply / 30);\n      let batchSupply = 30;\n      let curCount = 0\n      let prevCount = 0\n\n      if (supply < 30) {\n        const res = await nftInstance.methods.bulkMintTickets(supply, marketplaceAddress).send({ from: organizer, gas: DEFAULT_GAS });\n      } else {\n        for (let i = 0; i < batches; i++) {\n          prevCount = curCount;\n          curCount += 30;\n          if (supply < curCount) {\n            batchSupply = supply - prevCount;\n          }\n          const res = await nftInstance.methods.bulkMintTickets(batchSupply, marketplaceAddress).send({ from: organizer, gas: DEFAULT_GAS });\n        }\n      }\n    } catch (err) {\n      console.log('Error while creating new event', err);\n      renderNotification('danger', 'Error', `${err.message}`);\n    }\n  }\n\n  inputChangedHandler = (e) => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div class=\"container center\" >\n          <div class=\"container\" style={{backgroundColor: '#F5F8FA', backgroundOpacity: 0.5, marginTop: 40, boxShadow: '0px 10px 10px #888888', width: '50%', border: '1px solid black', padding: 30, paddingTop: 20, borderRadius: 10}}>\n            <Text fontSize='4xl' padding={18}>Create New Event</Text>\n            {this.state.name && <Text mb='8px'>Event Name</Text>}\n              <Input style={styles.input} placeholder='Event Name' value={this.state.name} onChange={(event) => this.setState({name: event.target.value})} />\n\n              {this.state.symbol && <Text mb='8px'>Event Ticker Symbol</Text>}\n              <Input style={styles.input} placeholder='Event Ticker Symbol' value={this.state.symbol}  onChange={(event) => this.setState({symbol: event.target.value})} />\n\n              {this.state.price && <Text mb='8px'>Ticket Price</Text>}\n              <Input style={styles.input} placeholder='Ticket Price' value={this.state.price}  onChange={(event) => this.setState({price: event.target.value})} />\n\n              {this.state.supply && <Text mb='8px'>Total Ticket Amount</Text>}\n              <Input style={styles.input} placeholder='Total Ticket Amount' value={this.state.supply}  onChange={(event) => this.setState({supply: event.target.value})} />\n\n              {this.state.commission && <Text mb='8px'>Commission (%)</Text>}\n              <Input style={styles.input} placeholder='Commission (%)' value={this.state.commission}  onChange={(event) => this.setState({commission: event.target.value})} />\n\n              {this.state.scalp_protection && <Text mb='8px'>Maximum Resale Price (%)</Text>}\n              <Input style={styles.input} placeholder='Maximum Resale Price (%)' value={this.state.scalp_protection}  onChange={(event) => this.setState({scalp_protection: event.target.value})} />\n              <Button colorScheme='teal' size='lg' marginTop={-2} onClick={(e) => this.onCreateEvent(e)}>\n                Create New Event\n              </Button>\n          </div>\n      </div >\n    )\n  }\n}\n\nconst styles = {\n  input: {\n    textAlign: 'center',\n    marginBottom: 35,\n  }\n};\n\nexport default Event;\n"]},"metadata":{},"sourceType":"module"}