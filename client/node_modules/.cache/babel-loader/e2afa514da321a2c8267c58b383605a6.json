{"ast":null,"code":"/**\n * Unmemoized version of {@link useRefToCallback}\n * @see {@link useRefToCallback}\n * @param ref\n */\nexport function refToCallback(ref) {\n  return function (newValue) {\n    if (typeof ref === 'function') {\n      ref(newValue);\n    } else if (ref) {\n      ref.current = newValue;\n    }\n  };\n}\n\nvar nullCallback = function nullCallback() {\n  return null;\n}; // lets maintain a weak ref to, well, ref :)\n// not using `kashe` to keep this package small\n\n\nvar weakMem = new WeakMap();\n\nvar weakMemoize = function weakMemoize(ref) {\n  var usedRef = ref || nullCallback;\n\n  if (weakMem.has(usedRef)) {\n    return weakMem.get(usedRef);\n  }\n\n  var cb = refToCallback(usedRef);\n  weakMem.set(usedRef, cb);\n  return cb;\n};\n/**\n * Transforms a given `ref` into `callback`.\n *\n * To transform `callback` into ref use {@link useCallbackRef|useCallbackRef(undefined, callback)}\n *\n * @param {ReactRef} ref\n * @returns {Function}\n *\n * @see https://github.com/theKashey/use-callback-ref#reftocallback\n *\n * @example\n * const ref = useRef(0);\n * const setRef = useRefToCallback(ref);\n * ðŸ‘‰ setRef(10);\n * âœ… ref.current === 10\n */\n\n\nexport function useRefToCallback(ref) {\n  return weakMemoize(ref);\n}","map":null,"metadata":{},"sourceType":"module"}