{"ast":null,"code":"import { forwardRef, chakra, useMultiStyleConfig, omitThemingProps, layoutPropNames } from '@chakra-ui/system';\nimport { isInputEvent, cx, __DEV__, warn, dataAttr, callAllHandlers, ariaAttr, callAll, split } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { mergeRefs, createContext } from '@chakra-ui/react-utils';\nimport { useControllableProp, useId, useBoolean } from '@chakra-ui/hooks';\nimport { useFormControlContext } from '@chakra-ui/form-control';\nimport { visuallyHiddenStyle } from '@chakra-ui/visually-hidden';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar _excluded$3 = [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isDisabled\", \"isFocusable\", \"isNative\"];\n/**\n * React hook to manage a group of radio inputs\n */\n\nfunction useRadioGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      onChangeProp = _props.onChange,\n      valueProp = _props.value,\n      defaultValue = _props.defaultValue,\n      nameProp = _props.name,\n      isDisabled = _props.isDisabled,\n      isFocusable = _props.isFocusable,\n      isNative = _props.isNative,\n      htmlProps = _objectWithoutPropertiesLoose(_props, _excluded$3);\n\n  var _React$useState = React.useState(defaultValue || \"\"),\n      valueState = _React$useState[0],\n      setValue = _React$useState[1];\n\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n      isControlled = _useControllableProp[0],\n      value = _useControllableProp[1];\n\n  var ref = React.useRef(null);\n  var focus = React.useCallback(function () {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  /**\n   * All radio options must use the same name\n   */\n\n  var fallbackName = useId(undefined, \"radio\");\n  var name = nameProp || fallbackName;\n  var onChange = React.useCallback(function (eventOrValue) {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  }, []);\n  var getRadioProps = React.useCallback(function (props, ref) {\n    var _extends2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      name: name\n    }, _extends2[checkedKey] = value != null ? props.value === value : undefined, _extends2.onChange = onChange, _extends2[\"data-radiogroup\"] = true, _extends2));\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps: getRootProps,\n    getRadioProps: getRadioProps,\n    name: name,\n    ref: ref,\n    focus: focus,\n    setValue: setValue,\n    value: value,\n    onChange: onChange,\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    htmlProps: htmlProps\n  };\n}\n\nvar _excluded$2 = [\"colorScheme\", \"size\", \"variant\", \"children\", \"className\", \"isDisabled\", \"isFocusable\"];\n\nvar _createContext = createContext({\n  name: \"RadioGroupContext\",\n  strict: false\n}),\n    RadioGroupProvider = _createContext[0],\n    useRadioGroupContext = _createContext[1];\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/radio\n */\n\n\nvar RadioGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var colorScheme = props.colorScheme,\n      size = props.size,\n      variant = props.variant,\n      children = props.children,\n      className = props.className,\n      isDisabled = props.isDisabled,\n      isFocusable = props.isFocusable,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var _useRadioGroup = useRadioGroup(rest),\n      value = _useRadioGroup.value,\n      onChange = _useRadioGroup.onChange,\n      getRootProps = _useRadioGroup.getRootProps,\n      name = _useRadioGroup.name,\n      htmlProps = _useRadioGroup.htmlProps;\n\n  var group = React.useMemo(function () {\n    return {\n      name: name,\n      size: size,\n      onChange: onChange,\n      colorScheme: colorScheme,\n      value: value,\n      variant: variant,\n      isDisabled: isDisabled,\n      isFocusable: isFocusable\n    };\n  }, [name, size, onChange, colorScheme, value, variant, isDisabled, isFocusable]);\n  var groupProps = getRootProps(htmlProps, ref);\n\n  var _className = cx(\"chakra-radio-group\", className);\n\n  return /*#__PURE__*/React.createElement(RadioGroupProvider, {\n    value: group\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, groupProps, {\n    className: _className\n  }), children));\n});\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}\n\nvar _excluded$1 = [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\", \"data-radiogroup\"];\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nfunction useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      defaultIsChecked = _props.defaultIsChecked,\n      _props$defaultChecked = _props.defaultChecked,\n      defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n      isCheckedProp = _props.isChecked,\n      isFocusable = _props.isFocusable,\n      isDisabledProp = _props.isDisabled,\n      isReadOnlyProp = _props.isReadOnly,\n      isRequiredProp = _props.isRequired,\n      onChange = _props.onChange,\n      isInvalidProp = _props.isInvalid,\n      name = _props.name,\n      value = _props.value,\n      idProp = _props.id,\n      dataRadioGroup = _props[\"data-radiogroup\"],\n      htmlProps = _objectWithoutPropertiesLoose(_props, _excluded$1);\n\n  var uuid = useId(undefined, \"radio\");\n  var formControl = useFormControlContext();\n  var group = useRadioGroupContext();\n  var isWithinRadioGroup = !!group || !!dataRadioGroup;\n  var isWithinFormControl = !!formControl;\n  var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n\n  var _useBoolean = useBoolean(),\n      isFocused = _useBoolean[0],\n      setFocused = _useBoolean[1];\n\n  var _useBoolean2 = useBoolean(),\n      isHovered = _useBoolean2[0],\n      setHovering = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      isActive = _useBoolean3[0],\n      setActive = _useBoolean3[1];\n\n  var _useState = useState(Boolean(defaultChecked)),\n      isCheckedState = _useState[0],\n      setChecked = _useState[1];\n\n  var _useControllableProp = useControllableProp(isCheckedProp, isCheckedState),\n      isControlled = _useControllableProp[0],\n      isChecked = _useControllableProp[1];\n\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n\n  var _ref = formControl != null ? formControl : {},\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur;\n\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var trulyDisabled = isDisabled && !isFocusable;\n    return _extends({}, props, {\n      id: id,\n      ref: ref,\n      type: \"radio\",\n      name: name,\n      value: value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(onFocus, props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-required\": ariaAttr(isRequired),\n      \"data-readonly\": dataAttr(isReadOnly),\n      style: visuallyHiddenStyle\n    });\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, setFocused, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid]);\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  var getRootProps = function getRootProps(props, ref) {\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    getRootProps: getRootProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nvar _excluded = [\"spacing\", \"children\", \"isFullWidth\", \"isDisabled\", \"isFocusable\"];\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/radio\n */\n\nvar Radio = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _props$name;\n\n  var group = useRadioGroupContext();\n  var onChangeProp = props.onChange,\n      valueProp = props.value;\n  var styles = useMultiStyleConfig(\"Radio\", _extends({}, group, props));\n  var ownProps = omitThemingProps(props);\n\n  var _ownProps$spacing = ownProps.spacing,\n      spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n      children = ownProps.children,\n      isFullWidth = ownProps.isFullWidth,\n      _ownProps$isDisabled = ownProps.isDisabled,\n      isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n      _ownProps$isFocusable = ownProps.isFocusable,\n      isFocusable = _ownProps$isFocusable === void 0 ? group == null ? void 0 : group.isFocusable : _ownProps$isFocusable,\n      rest = _objectWithoutPropertiesLoose(ownProps, _excluded);\n\n  var isChecked = props.isChecked;\n\n  if ((group == null ? void 0 : group.value) != null && valueProp != null) {\n    isChecked = group.value === valueProp;\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && valueProp != null) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var name = (_props$name = props == null ? void 0 : props.name) != null ? _props$name : group == null ? void 0 : group.name;\n\n  var _useRadio = useRadio(_extends({}, rest, {\n    isChecked: isChecked,\n    isFocusable: isFocusable,\n    isDisabled: isDisabled,\n    onChange: onChange,\n    name: name\n  })),\n      getInputProps = _useRadio.getInputProps,\n      getCheckboxProps = _useRadio.getCheckboxProps,\n      getLabelProps = _useRadio.getLabelProps,\n      getRootProps = _useRadio.getRootProps,\n      htmlProps = _useRadio.htmlProps;\n\n  var _split = split(htmlProps, layoutPropNames),\n      layoutProps = _split[0],\n      otherProps = _split[1];\n\n  var checkboxProps = getCheckboxProps(otherProps);\n  var inputProps = getInputProps({}, ref);\n  var labelProps = getLabelProps();\n  var rootProps = Object.assign({}, layoutProps, getRootProps());\n\n  var rootStyles = _extends({\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    cursor: \"pointer\"\n  }, styles.container);\n\n  var checkboxStyles = _extends({\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0\n  }, styles.control);\n\n  var labelStyles = _extends({\n    userSelect: \"none\",\n    marginStart: spacing\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    className: \"chakra-radio\"\n  }, rootProps, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-radio__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-radio__control\"\n  }, checkboxProps, {\n    __css: checkboxStyles\n  })), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-radio__label\"\n  }, labelProps, {\n    __css: labelStyles\n  }), children));\n});\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\";\n}\n\nexport { Radio, RadioGroup, useRadio, useRadioGroup, useRadioGroupContext };","map":null,"metadata":{},"sourceType":"module"}