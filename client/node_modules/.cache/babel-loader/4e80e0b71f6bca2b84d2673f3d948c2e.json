{"ast":null,"code":"var _jsxFileName = \"/workspace/nft-ticket-market/client/src/components/Event.jsx\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport eventToken from '../proxies/EventToken';\nimport EventNFT from '../proxies/EventNFT';\nimport renderNotification from '../utils/notification-handler';\nimport { Input, Button, Text } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3;\nconst DEFAULT_GAS = 64209;\n\nclass Events extends Component {\n  constructor() {\n    super();\n\n    this.onCreateEvent = async e => {\n      try {\n        e.preventDefault();\n        const organizer = await web3.eth.getCoinbase();\n        const {\n          name,\n          symbol,\n          price,\n          supply,\n          commission,\n          scalp_protection\n        } = this.state;\n        const {\n          events: {\n            Created: {\n              returnValues: {\n                ntfAddress,\n                marketplaceAddress\n              }\n            }\n          }\n        } = await eventFactory.methods.createNewFest(eventToken._address, name, symbol, web3.utils.toWei(price, 'ether'), supply, commission, scalp_protection).send({\n          from: organizer,\n          gas: DEFAULT_GAS\n        });\n        renderNotification('success', 'Success', `Event Created Successfully!`);\n        const nftInstance = await EventNFT(ntfAddress);\n        const batches = Math.ceil(supply / 30);\n        let batchSupply = 30;\n        let curCount = 0;\n        let prevCount = 0;\n\n        if (supply < 30) {\n          const res = await nftInstance.methods.bulkMintTickets(supply, marketplaceAddress).send({\n            from: organizer,\n            gas: DEFAULT_GAS\n          });\n        } else {\n          for (let i = 0; i < batches; i++) {\n            prevCount = curCount;\n            curCount += 30;\n\n            if (supply < curCount) {\n              batchSupply = supply - prevCount;\n            }\n\n            const res = await nftInstance.methods.bulkMintTickets(batchSupply, marketplaceAddress).send({\n              from: organizer,\n              gas: DEFAULT_GAS\n            });\n          }\n        }\n      } catch (err) {\n        console.log('Error while creating new event', err);\n        renderNotification('danger', 'Error', `${err.message}`);\n      }\n    };\n\n    this.inputChangedHandler = e => {\n      const state = this.state;\n      state[e.target.name] = e.target.value;\n      this.setState(state);\n    };\n\n    this.state = {\n      name: '',\n      symbol: '',\n      price: '',\n      supply: '',\n      commission: 20,\n      scalp_protection: 150\n    };\n    web3 = new Web3(window.ethereum);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        style: {\n          backgroundColor: '#F5F8FA',\n          backgroundOpacity: 0.5,\n          marginTop: 40,\n          boxShadow: '0px 10px 10px #888888',\n          width: '50%',\n          border: '1px solid black',\n          padding: 30,\n          paddingTop: 20,\n          borderRadius: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"4xl\",\n          padding: 18,\n          children: \"Create New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), this.state.name && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Event Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Event Name\",\n          value: this.state.name,\n          onChange: event => this.setState({\n            name: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this), this.state.symbol && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Event Ticker Symbol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Event Ticker Symbol\",\n          value: this.state.symbol,\n          onChange: event => this.setState({\n            symbol: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), this.state.price && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Ticket Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 36\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Ticket Price\",\n          value: this.state.price,\n          onChange: event => this.setState({\n            price: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), this.state.supply && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Total Ticket Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Total Ticket Amount\",\n          value: this.state.supply,\n          onChange: event => this.setState({\n            supply: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this), this.state.commission && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Commission (%)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Commission (%)\",\n          value: this.state.commission,\n          onChange: event => this.setState({\n            commission: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), this.state.scalp_protection && /*#__PURE__*/_jsxDEV(Text, {\n          mb: \"8px\",\n          children: \"Maximum Resale Price (%)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 47\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          style: styles.input,\n          placeholder: \"Maximum Resale Price (%)\",\n          value: this.state.scalp_protection,\n          onChange: event => this.setState({\n            scalp_protection: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"teal\",\n          size: \"lg\",\n          marginTop: -2,\n          onClick: e => this.onCreateEvent(e),\n          children: \"Create New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst styles = {\n  input: {\n    textAlign: 'center',\n    marginBottom: 35\n  }\n};\nexport default Event;","map":{"version":3,"sources":["/workspace/nft-ticket-market/client/src/components/Event.jsx"],"names":["React","Component","Web3","eventFactory","eventToken","EventNFT","renderNotification","Input","Button","Text","web3","DEFAULT_GAS","Events","constructor","onCreateEvent","e","preventDefault","organizer","eth","getCoinbase","name","symbol","price","supply","commission","scalp_protection","state","events","Created","returnValues","ntfAddress","marketplaceAddress","methods","createNewFest","_address","utils","toWei","send","from","gas","nftInstance","batches","Math","ceil","batchSupply","curCount","prevCount","res","bulkMintTickets","i","err","console","log","message","inputChangedHandler","target","value","setState","window","ethereum","render","backgroundColor","backgroundOpacity","marginTop","boxShadow","width","border","padding","paddingTop","borderRadius","styles","input","event","textAlign","marginBottom","Event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport eventToken from '../proxies/EventToken';\nimport EventNFT from '../proxies/EventNFT';\nimport renderNotification from '../utils/notification-handler';\nimport { Input, Button, Text } from '@chakra-ui/react'\n\nlet web3;\nconst DEFAULT_GAS = 64209;\n\nclass Events extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      symbol: '',\n      price: '',\n      supply: '',\n      commission: 20,\n      scalp_protection: 150,\n    };\n\n    web3 = new Web3(window.ethereum);\n  }\n\n  onCreateEvent = async (e) => {\n    try {\n      e.preventDefault();\n\n      const organizer = await web3.eth.getCoinbase();\n      const { name, symbol, price, supply, commission, scalp_protection } = this.state;\n      const { events: { Created: { returnValues: { ntfAddress, marketplaceAddress } } } } = await eventFactory.methods.createNewFest(\n        eventToken._address,\n        name,\n        symbol,\n        web3.utils.toWei(price, 'ether'),\n        supply,\n        commission,\n        scalp_protection\n      ).send({ from: organizer, gas: DEFAULT_GAS });\n\n      renderNotification('success', 'Success', `Event Created Successfully!`);\n\n      const nftInstance = await EventNFT(ntfAddress);\n      const batches = Math.ceil(supply / 30);\n      let batchSupply = 30;\n      let curCount = 0\n      let prevCount = 0\n\n      if (supply < 30) {\n        const res = await nftInstance.methods.bulkMintTickets(supply, marketplaceAddress).send({ from: organizer, gas: DEFAULT_GAS });\n      } else {\n        for (let i = 0; i < batches; i++) {\n          prevCount = curCount;\n          curCount += 30;\n          if (supply < curCount) {\n            batchSupply = supply - prevCount;\n          }\n          const res = await nftInstance.methods.bulkMintTickets(batchSupply, marketplaceAddress).send({ from: organizer, gas: DEFAULT_GAS });\n        }\n      }\n    } catch (err) {\n      console.log('Error while creating new event', err);\n      renderNotification('danger', 'Error', `${err.message}`);\n    }\n  }\n\n  inputChangedHandler = (e) => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div class=\"container center\" >\n          <div class=\"container\" style={{backgroundColor: '#F5F8FA', backgroundOpacity: 0.5, marginTop: 40, boxShadow: '0px 10px 10px #888888', width: '50%', border: '1px solid black', padding: 30, paddingTop: 20, borderRadius: 10}}>\n            <Text fontSize='4xl' padding={18}>Create New Event</Text>\n            {this.state.name && <Text mb='8px'>Event Name</Text>}\n              <Input style={styles.input} placeholder='Event Name' value={this.state.name} onChange={(event) => this.setState({name: event.target.value})} />\n\n              {this.state.symbol && <Text mb='8px'>Event Ticker Symbol</Text>}\n              <Input style={styles.input} placeholder='Event Ticker Symbol' value={this.state.symbol}  onChange={(event) => this.setState({symbol: event.target.value})} />\n\n              {this.state.price && <Text mb='8px'>Ticket Price</Text>}\n              <Input style={styles.input} placeholder='Ticket Price' value={this.state.price}  onChange={(event) => this.setState({price: event.target.value})} />\n\n              {this.state.supply && <Text mb='8px'>Total Ticket Amount</Text>}\n              <Input style={styles.input} placeholder='Total Ticket Amount' value={this.state.supply}  onChange={(event) => this.setState({supply: event.target.value})} />\n\n              {this.state.commission && <Text mb='8px'>Commission (%)</Text>}\n              <Input style={styles.input} placeholder='Commission (%)' value={this.state.commission}  onChange={(event) => this.setState({commission: event.target.value})} />\n\n              {this.state.scalp_protection && <Text mb='8px'>Maximum Resale Price (%)</Text>}\n              <Input style={styles.input} placeholder='Maximum Resale Price (%)' value={this.state.scalp_protection}  onChange={(event) => this.setState({scalp_protection: event.target.value})} />\n              <Button colorScheme='teal' size='lg' marginTop={-2} onClick={(e) => this.onCreateEvent(e)}>\n                Create New Event\n              </Button>\n          </div>\n      </div >\n    )\n  }\n}\n\nconst styles = {\n  input: {\n    textAlign: 'center',\n    marginBottom: 35,\n  }\n};\n\nexport default Event;\n"]},"metadata":{},"sourceType":"module"}