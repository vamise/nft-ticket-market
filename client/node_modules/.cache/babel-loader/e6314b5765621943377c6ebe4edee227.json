{"ast":null,"code":"var _jsxFileName = \"/workspace/nft-ticket-market/client/src/components/SecondaryMarket.jsx\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport EventNFT from '../proxies/EventNFT';\nimport EventMarketplace from '../proxies/EventMarketplace';\nimport eventToken from '../proxies/EventToken';\nimport renderNotification from '../utils/notification-handler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3;\n\nclass SecondaryMarket extends Component {\n  constructor() {\n    super();\n\n    this.updateTickets = async () => {\n      try {\n        const {\n          fest\n        } = this.state;\n        const initiator = await web3.eth.getCoinbase();\n        const nftInstance = await EventNFT(this.state.fest);\n        const saleTickets = await nftInstance.methods.getTicketsForSale().call({\n          from: initiator\n        });\n        const renderData = await Promise.all(saleTickets.map(async ticketId => {\n          const {\n            purchasePrice,\n            sellingPrice,\n            forSale\n          } = await nftInstance.methods.getTicketDetails(ticketId).call({\n            from: initiator\n          });\n          const festDetails = await eventFactory.methods.getEventDetails(fest).call({\n            from: initiator\n          });\n          const [festName] = Object.values(festDetails);\n\n          if (forSale) {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                class: \"center\",\n                children: festName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                class: \"center\",\n                children: ticketId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                class: \"center\",\n                children: web3.utils.fromWei(sellingPrice, 'ether')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                class: \"center\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"custom-btn login-btn\",\n                  onClick: this.onPurchaseTicket.bind(this, ticketId, sellingPrice, initiator),\n                  children: \"Buy\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 34\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 15\n              }, this)]\n            }, ticketId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }, this);\n          }\n        }));\n        this.setState({\n          renderTickets: renderData\n        });\n      } catch (err) {\n        renderNotification('danger', 'Error', 'Error wile updating sale tickets');\n        console.log('Error wile updating sale tickets', err);\n      }\n    };\n\n    this.onPurchaseTicket = async (ticketId, sellingPrice, initiator) => {\n      try {\n        const {\n          marketplace\n        } = this.state;\n        const marketplaceInstance = await EventMarketplace(marketplace);\n        await eventToken.methods.approve(marketplace, sellingPrice).send({\n          from: initiator,\n          gas: 6700000\n        });\n        await marketplaceInstance.methods.secondaryPurchase(ticketId).send({\n          from: initiator,\n          gas: 6700000\n        });\n        await this.updateTickets();\n        renderNotification('success', 'Success', 'Ticket purchased for the event successfully!');\n      } catch (err) {\n        renderNotification('danger', 'Error', err.message);\n        console.log('Error while purchasing the ticket', err);\n      }\n    };\n\n    this.updateEvents = async () => {\n      try {\n        const initiator = await web3.eth.getCoinbase();\n        const activeEvents = await eventFactory.methods.getActiveEvents().call({\n          from: initiator\n        });\n        const festDetails = await eventFactory.methods.getEventDetails(activeEvents[0]).call({\n          from: initiator\n        });\n        const renderData = await Promise.all(activeEvents.map(async (fest, i) => {\n          const festDetails = await eventFactory.methods.getEventDetails(activeEvents[i]).call({\n            from: initiator\n          });\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: fest,\n            children: festDetails[0]\n          }, fest, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this);\n        }));\n        this.setState({\n          fests: renderData,\n          fest: activeEvents[0],\n          marketplace: festDetails[4],\n          festName: festDetails[0]\n        });\n      } catch (err) {\n        renderNotification('danger', 'Error', 'Error while updating the events');\n        console.log('Error while updating the events', err);\n      }\n    };\n\n    this.onEventChangeHandler = async e => {\n      const state = this.state;\n      state[e.target.name] = e.target.value;\n      this.setState(state);\n      const {\n        fest\n      } = this.state;\n      const initiator = await web3.eth.getCoinbase();\n      const festDetails = await eventFactory.methods.getEventDetails(fest).call({\n        from: initiator\n      });\n      this.setState({\n        marketplace: festDetails[4]\n      });\n      await this.updateTickets();\n    };\n\n    this.inputChangedHandler = e => {\n      const state = this.state;\n      console.log('input', e.target.name, e.target.value);\n      state[e.target.name] = e.target.value;\n      this.setState(state);\n    };\n\n    this.state = {\n      tickets: [],\n      fests: [],\n      ticket: null,\n      fest: null,\n      marketplace: null,\n      price: null,\n      renderTickets: []\n    };\n    web3 = new Web3(window.ethereum);\n  }\n\n  async componentDidMount() {\n    await this.updateEvents();\n\n    if (this.state.fest) {\n      await this.updateTickets();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"container \",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"container \",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              style: {\n                padding: \"30px 0px 0px 10px\"\n              },\n              children: \"Secondary Marketplace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              class: \"left\",\n              children: \"Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"browser-default\",\n              name: \"fest\",\n              value: this.state.fest || undefined,\n              onChange: this.onEventChangeHandler,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: \"Select Event\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), this.state.fests]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              class: \"center\",\n              children: \"Purchase Tickets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              id: \"requests\",\n              class: \"responsive-table striped\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    class: \"center\",\n                    children: \"Event Name\"\n                  }, 'name', false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    class: \"center\",\n                    children: \"Ticket Id\"\n                  }, 'ticketId', false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    class: \"center\",\n                    children: \"Cost(in EVENT)\"\n                  }, 'cost', false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    class: \"center\",\n                    children: \"Purchase\"\n                  }, 'purchase', false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                class: \"striped highlight\",\n                children: this.state.renderTickets\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SecondaryMarket;","map":{"version":3,"sources":["/workspace/nft-ticket-market/client/src/components/SecondaryMarket.jsx"],"names":["React","Component","Web3","eventFactory","EventNFT","EventMarketplace","eventToken","renderNotification","web3","SecondaryMarket","constructor","updateTickets","fest","state","initiator","eth","getCoinbase","nftInstance","saleTickets","methods","getTicketsForSale","call","from","renderData","Promise","all","map","ticketId","purchasePrice","sellingPrice","forSale","getTicketDetails","festDetails","getEventDetails","festName","Object","values","utils","fromWei","onPurchaseTicket","bind","setState","renderTickets","err","console","log","marketplace","marketplaceInstance","approve","send","gas","secondaryPurchase","message","updateEvents","activeEvents","getActiveEvents","i","fests","onEventChangeHandler","e","target","name","value","inputChangedHandler","tickets","ticket","price","window","ethereum","componentDidMount","render","padding","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport eventFactory from '../proxies/eventFactory';\nimport EventNFT from '../proxies/EventNFT';\nimport EventMarketplace from '../proxies/EventMarketplace';\nimport eventToken from '../proxies/EventToken';\nimport renderNotification from '../utils/notification-handler';\n\nlet web3;\n\nclass SecondaryMarket extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      tickets: [],\n      fests: [],\n      ticket: null,\n      fest: null,\n      marketplace: null,\n      price: null,\n      renderTickets: [],\n    };\n\n    web3 = new Web3(window.ethereum);\n  }\n\n  async componentDidMount() {\n    await this.updateEvents();\n    if (this.state.fest) {\n      await this.updateTickets()\n    }\n  }\n\n  updateTickets = async () => {\n    try {\n      const { fest } = this.state;\n      const initiator = await web3.eth.getCoinbase();\n      const nftInstance = await EventNFT(this.state.fest);\n      const saleTickets = await nftInstance.methods.getTicketsForSale().call({ from: initiator });\n      const renderData = await Promise.all(saleTickets.map(async ticketId => {\n        const { purchasePrice, sellingPrice, forSale } = await nftInstance.methods.getTicketDetails(ticketId).call({ from: initiator });\n\n        const festDetails = await eventFactory.methods.getEventDetails(fest).call({ from: initiator });\n        const [festName] = Object.values(festDetails);\n\n        if (forSale) {\n          return (\n            <tr key={ticketId}>\n              <td class=\"center\">{festName}</td>\n              <td class=\"center\">{ticketId}</td>\n              <td class=\"center\">{web3.utils.fromWei(sellingPrice, 'ether')}</td>\n\n              <td class=\"center\"><button type=\"submit\" className=\"custom-btn login-btn\" onClick={this.onPurchaseTicket.bind(this, ticketId, sellingPrice, initiator)}>Buy</button></td>\n            </tr>\n          );\n        }\n      }));\n\n      this.setState({ renderTickets: renderData });\n    } catch (err) {\n      renderNotification('danger', 'Error', 'Error wile updating sale tickets');\n      console.log('Error wile updating sale tickets', err);\n    }\n  }\n\n  onPurchaseTicket = async (ticketId, sellingPrice, initiator) => {\n    try {\n      const { marketplace } = this.state;\n      const marketplaceInstance = await EventMarketplace(marketplace);\n      await eventToken.methods.approve(marketplace, sellingPrice).send({ from: initiator, gas: 6700000 });\n      await marketplaceInstance.methods.secondaryPurchase(ticketId).send({ from: initiator, gas: 6700000 });\n      await this.updateTickets()\n\n      renderNotification('success', 'Success', 'Ticket purchased for the event successfully!');\n    } catch (err) {\n      renderNotification('danger', 'Error', err.message);\n      console.log('Error while purchasing the ticket', err);\n    }\n  }\n\n\n  updateEvents = async () => {\n    try {\n      const initiator = await web3.eth.getCoinbase();\n      const activeEvents = await eventFactory.methods.getActiveEvents().call({ from: initiator });\n      const festDetails = await eventFactory.methods.getEventDetails(activeEvents[0]).call({ from: initiator });\n      const renderData = await Promise.all(activeEvents.map(async (fest, i) => {\n        const festDetails = await eventFactory.methods.getEventDetails(activeEvents[i]).call({ from: initiator });\n        return (\n          <option key={fest} value={fest} >{festDetails[0]}</option>\n        )\n      }));\n\n      this.setState({ fests: renderData, fest: activeEvents[0], marketplace: festDetails[4], festName: festDetails[0] });\n    } catch (err) {\n      renderNotification('danger', 'Error', 'Error while updating the events');\n      console.log('Error while updating the events', err);\n    }\n  }\n\n  onEventChangeHandler = async (e) => {\n    const state = this.state;\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n\n    const { fest } = this.state;\n    const initiator = await web3.eth.getCoinbase();\n    const festDetails = await eventFactory.methods.getEventDetails(fest).call({ from: initiator });\n\n    this.setState({ marketplace: festDetails[4] });\n    await this.updateTickets();\n  }\n\n  inputChangedHandler = (e) => {\n    const state = this.state;\n    console.log('input', e.target.name, e.target.value)\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div class=\"container center\" >\n        <div class=\"row\">\n          <div class=\"container \">\n            <div class=\"container \">\n\n              <h5 style={{ padding: \"30px 0px 0px 10px\" }}>Secondary Marketplace</h5>\n\n              <label class=\"left\">Event</label>\n              <select className=\"browser-default\" name='fest' value={this.state.fest || undefined} onChange={this.onEventChangeHandler}>\n                <option value=\"\" disabled >Select Event</option>\n                {this.state.fests}\n              </select><br /><br />\n\n              <h4 class=\"center\">Purchase Tickets</h4>\n\n              <table id='requests' class=\"responsive-table striped\" >\n                <thead>\n                  <tr>\n                    <th key='name' class=\"center\">Event Name</th>\n                    <th key='ticketId' class=\"center\">Ticket Id</th>\n                    <th key='cost' class=\"center\">Cost(in EVENT)</th>\n                    <th key='purchase' class=\"center\">Purchase</th>\n                  </tr>\n                </thead>\n                <tbody class=\"striped highlight\">\n                  {this.state.renderTickets}\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n        </div>\n      </div >\n    )\n  }\n}\n\nexport default SecondaryMarket;"]},"metadata":{},"sourceType":"module"}