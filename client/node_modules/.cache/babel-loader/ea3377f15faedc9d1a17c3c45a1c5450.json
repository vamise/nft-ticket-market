{"ast":null,"code":"import { Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/alert';\nimport { CloseButton } from '@chakra-ui/close-button';\nimport { useChakra, ThemeProvider, ColorModeContext, chakra } from '@chakra-ui/system';\nimport defaultTheme from '@chakra-ui/theme';\nimport { isFunction, __DEV__, objectKeys, isBrowser, noop } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport { useIsPresent, motion, AnimatePresence } from 'framer-motion';\nimport { useUpdateEffect, useTimeout } from '@chakra-ui/hooks';\nimport ReachAlert from '@reach/alert';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\n\nfunction findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(function (toast) {\n    return toast.id === id;\n  }) : -1;\n  return {\n    position: position,\n    index: index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\n\nvar getToastPosition = function getToastPosition(toasts, id) {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(function (toast) {\n    return toast.id === id;\n  })) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\n\nfunction getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: alignItems\n  };\n}\n/**\n * @todo After Gerrit refactors this implementation,\n * allow users to change the toast transition direction from\n * a `ToastProvider` component.\n *\n * Here's an API example:\n *\n * ```jsx\n * <ToastProvider\n *   motion={customVariants}\n *   component={CustomToastComponent}\n *   autoCloseTimeout={3000}\n *   toastSpacing={32} // this will control the `margin` value applied\n * >\n * </ToastProvider>\n * ```\n */\n\n\nvar toastMotionVariants = {\n  initial: function initial(props) {\n    var _ref;\n\n    var position = props.position;\n    var dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    var factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return _ref = {\n      opacity: 0\n    }, _ref[dir] = factor * 24, _ref;\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\n\nvar Toast$1 = function Toast(props) {\n  var id = props.id,\n      message = props.message,\n      onCloseComplete = props.onCloseComplete,\n      onRequestRemove = props.onRequestRemove,\n      _props$requestClose = props.requestClose,\n      requestClose = _props$requestClose === void 0 ? false : _props$requestClose,\n      _props$position = props.position,\n      position = _props$position === void 0 ? \"bottom\" : _props$position,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 5000 : _props$duration;\n\n  var _React$useState = React.useState(duration),\n      delay = _React$useState[0],\n      setDelay = _React$useState[1];\n\n  var isPresent = useIsPresent();\n  useUpdateEffect(function () {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(function () {\n    setDelay(duration);\n  }, [duration]);\n\n  var onMouseEnter = function onMouseEnter() {\n    return setDelay(null);\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    return setDelay(duration);\n  };\n\n  var close = function close() {\n    if (isPresent) onRequestRemove();\n  };\n\n  React.useEffect(function () {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  var style = React.useMemo(function () {\n    return getToastStyle(position);\n  }, [position]);\n  return /*#__PURE__*/React.createElement(motion.li, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: toastMotionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position: position\n    },\n    style: style\n  }, /*#__PURE__*/React.createElement(ReachAlert, {\n    className: \"chakra-toast__inner\",\n    style: {\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: \"0.5rem\"\n    }\n  }, isFunction(message) ? message({\n    id: id,\n    onClose: close\n  }) : message));\n};\n\nif (__DEV__) {\n  Toast$1.displayName = \"Toast\";\n}\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\n\n\nvar ToastManager = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ToastManager, _React$Component);\n  /**\n   * Static id counter to create unique ids\n   * for each toast\n   */\n\n  /**\n   * State to track all the toast across all positions\n   */\n\n\n  function ToastManager(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      top: [],\n      \"top-left\": [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    };\n\n    _this.notify = function (message, options) {\n      var toast = _this.createToast(message, options);\n\n      var position = toast.position,\n          id = toast.id;\n\n      _this.setState(function (prevToasts) {\n        var _extends2;\n\n        var isTop = position.includes(\"top\");\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n\n        var toasts = isTop ? [toast].concat(prevToasts[position]) : [].concat(prevToasts[position], [toast]);\n        return _extends({}, prevToasts, (_extends2 = {}, _extends2[position] = toasts, _extends2));\n      });\n\n      return id;\n    };\n\n    _this.updateToast = function (id, options) {\n      _this.setState(function (prevState) {\n        var nextState = _extends({}, prevState);\n\n        var _findToast = findToast(nextState, id),\n            position = _findToast.position,\n            index = _findToast.index;\n\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n\n        return nextState;\n      });\n    };\n\n    _this.closeAll = function (_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          positions = _ref.positions; // only one setState here for perf reasons\n      // instead of spamming this.closeToast\n\n\n      _this.setState(function (prev) {\n        var allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        var positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce(function (acc, position) {\n          acc[position] = prev[position].map(function (toast) {\n            return _extends({}, toast, {\n              requestClose: true\n            });\n          });\n          return acc;\n        }, {});\n      });\n    };\n\n    _this.createToast = function (message, options) {\n      var _options$id, _options$position;\n\n      ToastManager.counter += 1;\n      var id = (_options$id = options.id) != null ? _options$id : ToastManager.counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      return {\n        id: id,\n        message: message,\n        position: position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: function onRequestRemove() {\n          return _this.removeToast(String(id), position);\n        },\n        status: options.status,\n        requestClose: false\n      };\n    };\n\n    _this.closeToast = function (id) {\n      _this.setState(function (prevState) {\n        var _extends3;\n\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, (_extends3 = {}, _extends3[position] = prevState[position].map(function (toast) {\n          // id may be string or number\n          // eslint-disable-next-line eqeqeq\n          if (toast.id == id) {\n            return _extends({}, toast, {\n              requestClose: true\n            });\n          }\n\n          return toast;\n        }), _extends3));\n      });\n    };\n\n    _this.removeToast = function (id, position) {\n      _this.setState(function (prevState) {\n        var _extends4;\n\n        return _extends({}, prevState, (_extends4 = {}, _extends4[position] = prevState[position].filter(function (toast) {\n          return toast.id != id;\n        }), _extends4));\n      });\n    };\n\n    _this.isVisible = function (id) {\n      var _findToast2 = findToast(_this.state, id),\n          position = _findToast2.position;\n\n      return Boolean(position);\n    };\n\n    _this.getStyle = function (position) {\n      var isTopOrBottom = position === \"top\" || position === \"bottom\";\n      var margin = isTopOrBottom ? \"0 auto\" : undefined;\n      var top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : undefined;\n      var bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : undefined;\n      var right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : undefined;\n      var left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : undefined;\n      return {\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        margin: margin,\n        top: top,\n        bottom: bottom,\n        right: right,\n        left: left\n      };\n    };\n\n    var methods = {\n      notify: _this.notify,\n      closeAll: _this.closeAll,\n      close: _this.closeToast,\n      update: _this.updateToast,\n      isActive: _this.isVisible\n    };\n    props.notify(methods);\n    return _this;\n  }\n  /**\n   * Function to actually create a toast and add it\n   * to state at the specified position\n   */\n\n\n  var _proto = ToastManager.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    return objectKeys(this.state).map(function (position) {\n      var toasts = _this2.state[position];\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        key: position,\n        id: \"chakra-toast-manager-\" + position,\n        style: _this2.getStyle(position)\n      }, /*#__PURE__*/React.createElement(AnimatePresence, {\n        initial: false\n      }, toasts.map(function (toast) {\n        return /*#__PURE__*/React.createElement(Toast$1, _extends({\n          key: toast.id\n        }, toast));\n      })));\n    });\n  };\n\n  return ToastManager;\n}(React.Component);\n\nToastManager.counter = 0;\nvar portalId = \"chakra-toast-portal\";\n\nvar Toaster =\n/**\n * Initialize the manager and mount it in the DOM\n * inside the portal node.\n *\n * @todo\n *\n * Update toast constructor to use `PortalManager`'s node or document.body.\n * Once done, we can remove the `zIndex` in `toast.manager.tsx`\n */\nfunction Toaster() {\n  var _this = this;\n\n  this.createToast = void 0;\n  this.removeAll = void 0;\n  this.closeToast = void 0;\n  this.updateToast = void 0;\n  this.isToastActive = void 0;\n\n  this.bindFunctions = function (methods) {\n    _this.createToast = methods.notify;\n    _this.removeAll = methods.closeAll;\n    _this.closeToast = methods.close;\n    _this.updateToast = methods.update;\n    _this.isToastActive = methods.isActive;\n  };\n\n  this.notify = function (message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _this.createToast == null ? void 0 : _this.createToast(message, options);\n  };\n\n  this.close = function (id) {\n    _this.closeToast == null ? void 0 : _this.closeToast(id);\n  };\n\n  this.closeAll = function (options) {\n    _this.removeAll == null ? void 0 : _this.removeAll(options);\n  };\n\n  this.update = function (id, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this.updateToast == null ? void 0 : _this.updateToast(id, options);\n  };\n\n  this.isActive = function (id) {\n    return _this.isToastActive == null ? void 0 : _this.isToastActive(id);\n  };\n\n  if (!isBrowser) return;\n  var portal;\n  var existingPortal = document.getElementById(portalId);\n\n  if (existingPortal) {\n    portal = existingPortal;\n  } else {\n    var _document$body;\n\n    var div = document.createElement(\"div\");\n    div.id = portalId;\n    (_document$body = document.body) == null ? void 0 : _document$body.appendChild(div);\n    portal = div;\n  }\n\n  render( /*#__PURE__*/React.createElement(ToastManager, {\n    notify: this.bindFunctions\n  }), portal);\n};\n\nvar toast = new Toaster();\n\nfunction getToastPlacement(position, dir) {\n  var _logical$dir;\n\n  if (!position) return;\n  var logicals = {\n    \"top-start\": {\n      ltr: \"top-left\",\n      rtl: \"top-right\"\n    },\n    \"top-end\": {\n      ltr: \"top-right\",\n      rtl: \"top-left\"\n    },\n    \"bottom-start\": {\n      ltr: \"bottom-left\",\n      rtl: \"bottom-right\"\n    },\n    \"bottom-end\": {\n      ltr: \"bottom-right\",\n      rtl: \"bottom-left\"\n    }\n  };\n  var logical = logicals[position];\n  return (_logical$dir = logical == null ? void 0 : logical[dir]) != null ? _logical$dir : position;\n}\n\nvar Toast = function Toast(props) {\n  var status = props.status,\n      variant = props.variant,\n      id = props.id,\n      title = props.title,\n      isClosable = props.isClosable,\n      onClose = props.onClose,\n      description = props.description;\n  var alertTitleId = typeof id !== \"undefined\" ? \"toast-\" + id + \"-title\" : undefined;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    \"aria-labelledby\": alertTitleId\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\",\n    maxWidth: \"100%\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, {\n    id: alertTitleId\n  }, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nfunction createStandaloneToast(_temp) {\n  var _ref = _temp === void 0 ? defaultStandaloneParam : _temp,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme,\n      _ref$colorMode = _ref.colorMode,\n      colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode,\n      _ref$toggleColorMode = _ref.toggleColorMode,\n      toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode,\n      _ref$setColorMode = _ref.setColorMode,\n      setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode,\n      _ref$defaultOptions = _ref.defaultOptions,\n      defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions;\n\n  var renderWithProviders = function renderWithProviders(props, options) {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n      value: {\n        colorMode: colorMode,\n        setColorMode: setColorMode,\n        toggleColorMode: toggleColorMode\n      }\n    }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n  };\n\n  var toastImpl = function toastImpl(options) {\n    var opts = _extends({}, defaultOptions, options);\n\n    opts.position = getToastPlacement(opts.position, theme.direction);\n\n    var Message = function Message(props) {\n      return renderWithProviders(props, opts);\n    };\n\n    return toast.notify(Message, opts);\n  };\n\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = function (id, options) {\n    if (!id) return;\n\n    var opts = _extends({}, defaultOptions, options);\n\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    toast.update(id, _extends({}, opts, {\n      message: function message(props) {\n        return renderWithProviders(props, opts);\n      }\n    }));\n  };\n\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\n\nfunction useToast(options) {\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme,\n      setColorMode = _useChakra.setColorMode,\n      toggleColorMode = _useChakra.toggleColorMode,\n      colorMode = _useChakra.colorMode;\n\n  return React.useMemo(function () {\n    return createStandaloneToast({\n      theme: theme,\n      colorMode: colorMode,\n      setColorMode: setColorMode,\n      toggleColorMode: toggleColorMode,\n      defaultOptions: options\n    });\n  }, [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\n\nexport { createStandaloneToast, defaultStandaloneParam, toast, useToast };","map":null,"metadata":{},"sourceType":"module"}