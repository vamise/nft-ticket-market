{"ast":null,"code":"import * as React from 'react';\nimport ReactFocusLock from 'react-focus-lock';\nimport { getAllFocusable, focus, __DEV__ } from '@chakra-ui/utils';\n\nvar FocusLock = function FocusLock(props) {\n  var initialFocusRef = props.initialFocusRef,\n      finalFocusRef = props.finalFocusRef,\n      contentRef = props.contentRef,\n      restoreFocus = props.restoreFocus,\n      children = props.children,\n      isDisabled = props.isDisabled,\n      autoFocus = props.autoFocus,\n      persistentFocus = props.persistentFocus,\n      lockFocusAcrossFrames = props.lockFocusAcrossFrames;\n  var onActivation = React.useCallback(function () {\n    if (initialFocusRef != null && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef != null && contentRef.current) {\n      var focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        focus(contentRef.current, {\n          nextTick: true\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  var onDeactivation = React.useCallback(function () {\n    var _finalFocusRef$curren;\n\n    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();\n  }, [finalFocusRef]);\n  var returnFocus = restoreFocus && !finalFocusRef;\n  return /*#__PURE__*/React.createElement(ReactFocusLock, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus: persistentFocus,\n    autoFocus: autoFocus,\n    disabled: isDisabled,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    returnFocus: returnFocus\n  }, children);\n};\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\";\n}\n\nexport { FocusLock, FocusLock as default };","map":null,"metadata":{},"sourceType":"module"}