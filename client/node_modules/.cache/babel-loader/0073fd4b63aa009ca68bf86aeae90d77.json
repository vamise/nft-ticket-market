{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { env } from './env';\nvar cache = new WeakMap();\nexport function useSidecar(importer, effect) {\n  var options = effect && effect.options || {};\n\n  if (env.isNode && !options.ssr) {\n    return [null, null];\n  }\n\n  var couldUseCache = env.forceCache || env.isNode && !!options.ssr || !options.async;\n\n  var _a = useState(couldUseCache ? function () {\n    return cache.get(importer);\n  } : undefined),\n      Car = _a[0],\n      setCar = _a[1];\n\n  var _b = useState(null),\n      error = _b[0],\n      setError = _b[1];\n\n  useEffect(function () {\n    if (!Car) {\n      importer().then(function (car) {\n        var resolved = effect ? effect.read() : car.default || car;\n\n        if (!resolved) {\n          console.error('Sidecar error: with importer', importer);\n          var error_1;\n\n          if (effect) {\n            console.error('Sidecar error: with medium', effect);\n            error_1 = new Error('Sidecar medium was not found');\n          } else {\n            error_1 = new Error('Sidecar was not found in exports');\n          }\n\n          setError(function () {\n            return error_1;\n          });\n          throw error_1;\n        }\n\n        cache.set(importer, resolved);\n        setCar(function () {\n          return resolved;\n        });\n      }, function (e) {\n        return setError(function () {\n          return e;\n        });\n      });\n    }\n  }, []);\n  return [Car, error];\n}\n;","map":null,"metadata":{},"sourceType":"module"}